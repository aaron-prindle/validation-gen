//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package listsupport

import (
	context "context"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*MainStruct)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		return Validate_MainStruct(ctx, op, nil /* fldPath */, obj.(*MainStruct), safe.Cast[*MainStruct](oldObj))
	})
	scheme.AddValidationFunc((*StructWithPointerField)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		return Validate_StructWithPointerField(ctx, op, nil /* fldPath */, obj.(*StructWithPointerField), safe.Cast[*StructWithPointerField](oldObj))
	})
	return nil
}

func Validate_MainStruct(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *MainStruct) (errs field.ErrorList) {
	// field MainStruct.TypeMeta has no validation

	// field MainStruct.Conditions
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []MyCondition) (errs field.ErrorList) {
			errs = append(errs, validate.ListMapElementByKey(ctx, op, fldPath, obj, oldObj, "type", "Ready", func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *MyCondition) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "Ready.Status is being validated (and will fail)")
			})...)
			errs = append(errs, validate.ListMapElementByKey(ctx, op, fldPath, obj, oldObj, "type", "Progressing", func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *MyCondition) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "Progressing.Status is being validated (and will fail)")
			})...)
			errs = append(errs, validate.ListMapElementByKey(ctx, op, fldPath, obj, oldObj, "type", "Degraded", func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *MyCondition) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "Degraded.Status is being validated (and will fail)")
			})...)
			errs = append(errs, validate.ListMapElementByKey(ctx, op, fldPath, obj, oldObj, "type", "NonExistent", func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *MyCondition) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "NonExistent.Status is being validated (and will fail if it does exist)")
			})...)
			errs = append(errs, validate.ListMapElementByKey(ctx, op, fldPath, obj, oldObj, "reason", "Special", func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *MyCondition) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "SpecialReason.Status is being validated (and will fail)")
			})...)
			return
		}(fldPath.Child("conditions"), obj.Conditions, safe.Field(oldObj, func(oldObj *MainStruct) []MyCondition { return oldObj.Conditions }))...)

	// field MainStruct.DirectStruct
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *MyCondition) (errs field.ErrorList) {
			errs = append(errs, validate.Subfield(ctx, op, fldPath, obj, oldObj, "defaultType", func(o *MyCondition) *string { return &o.DefaultType }, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "Direct.DefaultType is being validated (and will fail)")
			})...)
			return
		}(fldPath.Child("directStruct"), &obj.DirectStruct, safe.Field(oldObj, func(oldObj *MainStruct) *MyCondition { return &oldObj.DirectStruct }))...)

	return errs
}

func Validate_StructWithPointerField(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *StructWithPointerField) (errs field.ErrorList) {
	// field StructWithPointerField.TypeMeta has no validation

	// field StructWithPointerField.Items
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []ElementWithPointer) (errs field.ErrorList) {
			errs = append(errs, validate.ListMapElementByKey(ctx, op, fldPath, obj, oldObj, "key", "Target", func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *ElementWithPointer) field.ErrorList {
				return validate.Subfield(ctx, op, fldPath, obj, oldObj, "value", func(o *ElementWithPointer) *string { return o.Value }, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
					return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "PointerInElement.Value is being validated (and will fail)")
				})
			})...)
			return
		}(fldPath.Child("items"), obj.Items, safe.Field(oldObj, func(oldObj *StructWithPointerField) []ElementWithPointer { return oldObj.Items }))...)

	return errs
}
