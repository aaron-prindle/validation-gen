//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package mapofcomplexslices

import (
	context "context"

	equality "k8s.io/apimachinery/pkg/api/equality"
	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*TestStruct)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		return Validate_TestStruct(ctx, op, nil /* fldPath */, obj.(*TestStruct), safe.Cast[*TestStruct](oldObj))
	})
	return nil
}

func Validate_ComplexValue(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *ComplexValue) (errs field.ErrorList) {
	// type ComplexValue
	if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
		return nil // no changes
	}
	errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "type ComplexValue")...)

	// field ComplexValue.Name
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			errs = append(errs, validate.MaxLength(ctx, op, fldPath, obj, oldObj, 50)...)
			return
		}(fldPath.Child("name"), &obj.Name, safe.Field(oldObj, func(oldObj *ComplexValue) *string { return &oldObj.Name }))...)

	// field ComplexValue.Value
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *int) (errs field.ErrorList) {
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			errs = append(errs, validate.Minimum(ctx, op, fldPath, obj, oldObj, 0)...)
			return
		}(fldPath.Child("value"), &obj.Value, safe.Field(oldObj, func(oldObj *ComplexValue) *int { return &oldObj.Value }))...)

	return errs
}

func Validate_TestStruct(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *TestStruct) (errs field.ErrorList) {
	// type TestStruct
	if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
		return nil // no changes
	}
	errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "type TestStruct")...)

	// field TestStruct.TypeMeta has no validation

	// field TestStruct.ComplexMap
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj map[string][]ComplexValue) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.EachMapSliceVal(ctx, op, fldPath, obj, oldObj, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *ComplexValue) field.ErrorList {
				return validate.EachSliceVal(ctx, op, fldPath, obj, oldObj, nil, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *ComplexValue) field.ErrorList {
					return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "element")
				})
			})...)
			errs = append(errs, validate.EachMapSliceVal(ctx, op, fldPath, obj, oldObj, Validate_ComplexValue)...)
			// Validate elements of slice values in map
			errs = append(errs, validate.EachMapSliceVal(ctx, op, fldPath, obj, oldObj, Validate_ComplexValue)...)
			return
		}(fldPath.Child("complexMap"), obj.ComplexMap, safe.Field(oldObj, func(oldObj *TestStruct) map[string][]ComplexValue { return oldObj.ComplexMap }))...)

	return errs
}
